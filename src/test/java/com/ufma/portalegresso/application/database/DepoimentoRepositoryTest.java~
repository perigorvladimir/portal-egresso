package com.ufma.portalegresso.application.database;

import com.ufma.portalegresso.application.domain.Depoimento;
import com.ufma.portalegresso.application.domain.Egresso;
import com.ufma.portalegresso.application.out.DepoimentoJpaRepository;
import com.ufma.portalegresso.application.out.EgressoJpaRepository;
import jakarta.validation.ConstraintViolationException;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(SpringExtension.class)
@SpringBootTest
@ActiveProfiles("test")
public class DepoimentoRepositoryTest {
    @Autowired
    private DepoimentoJpaRepository depoimentoJpaRepository;
    @Autowired
    private EgressoJpaRepository egressoJpaRepository;
    private static Egresso egressoBase;
    @BeforeAll
    public static void setUp(@Autowired EgressoJpaRepository egressoJpaRepository){
        Egresso egresso = Egresso.builder()
                .nome("egresso para teste")
                .email("egressoparateste@gmail.com")
                .descricao("descricao egresso para teste")
                .curriculo("curriculo egresso para teste")
                .instagram("egresso_teste")
                .linkedin("https://linkedin/egressoTeste")
                .foto("foto codificada")
                .build();
        egressoBase = egressoJpaRepository.save(egresso);
    }
    @AfterAll
    public static void cleanUp(@Autowired EgressoJpaRepository egressoJpaRepository){
        egressoJpaRepository.deleteById(egressoBase.getIdEgresso());
    }
    @Test
    @Transactional
    public void deveSalvarDepoimentoFluxoPadrao(){
        // CENARIO
        Depoimento depoimento = Depoimento.builder()
                .egresso(egressoBase)
                .texto("texto salvar depoimento teste")
                .data(LocalDate.now())
                .build();
        // ACAO
        Depoimento depoimentoSalvo = depoimentoJpaRepository.save(depoimento);
        // VERIFICACAO
        assertNotNull(depoimentoSalvo);
        assertEquals(depoimento.getEgresso(),depoimentoSalvo.getEgresso());
        assertEquals(depoimento.getTexto(),depoimentoSalvo.getTexto());
        assertEquals(depoimento.getData(),depoimentoSalvo.getData());
    }

    @Test
    @Transactional
    public void deveVerificarBuscarDepoimentoPorId(){
        // CENARIO
        Integer idDepoimentoCriado1 = depoimentoJpaRepository.save(Depoimento.builder()
                .egresso(egressoBase)
                .texto("depoimento teste 1")
                .data(LocalDate.now())
                .build()).getIdDepoimento();
        Integer idDepoimentoCriado2 = depoimentoJpaRepository.save(Depoimento.builder()
                .egresso(egressoBase)
                .texto("depoimento teste 2")
                .data(LocalDate.now())
                .build()).getIdDepoimento();
        // ACAO
        Optional<Depoimento> resultado1 = depoimentoJpaRepository.findById(idDepoimentoCriado1);
        Optional<Depoimento> resultado2 = depoimentoJpaRepository.findById(idDepoimentoCriado2);
        // VALIDAÇÃO
        assertTrue(resultado1.isPresent());
        Depoimento depoimentoEncontrado1 = resultado1.get();
        assertEquals(idDepoimentoCriado1, depoimentoEncontrado1.getIdDepoimento());
        assertEquals("depoimento teste 1", depoimentoEncontrado1.getTexto());

        assertTrue(resultado2.isPresent());
        Depoimento depoimentoEncontrado2 = resultado2.get();
        assertEquals(idDepoimentoCriado2, depoimentoEncontrado2.getIdDepoimento());
        assertEquals("depoimento teste 2", depoimentoEncontrado2.getTexto());
    }
    @Test
    public void naoDeveSalvarDepoimentoSemEgressoOuSemTextoOuSemData(){
        // CENARIO
        Depoimento depoimento = Depoimento.builder()
                .texto("depoimento teste sem egresso")
                .data(LocalDate.now())
                .build();
        // ACAO e VALIDACAO
        DataIntegrityViolationException exceptionSemEgresso = assertThrows(DataIntegrityViolationException.class, () -> depoimentoJpaRepository.save(depoimento));
        assertEquals("id_egresso", exceptionSemEgresso.getCause().getCause().getLocalizedMessage().split("\"")[1].toLowerCase());

        depoimento.setEgresso(egressoBase);
        depoimento.setTexto(null);
        DataIntegrityViolationException exceptionSemTexto = assertThrows(DataIntegrityViolationException.class, () -> depoimentoJpaRepository.save(depoimento));
        assertEquals("texto", exceptionSemTexto.getCause().getCause().getLocalizedMessage().split("\"")[1].toLowerCase());

        depoimento.setTexto("depoimento sem texto");
        depoimento.setData(null);
        DataIntegrityViolationException exceptionSemData = assertThrows(DataIntegrityViolationException.class, () -> depoimentoJpaRepository.save(depoimento));
        assertEquals("data", exceptionSemData.getCause().getCause().getLocalizedMessage().split("\"")[1].toLowerCase());

        depoimento.setData(LocalDate.now());
        Depoimento depoimentoSalvo = assertDoesNotThrow(() -> depoimentoJpaRepository.save(depoimento));
        depoimentoJpaRepository.deleteById(depoimentoSalvo.getIdDepoimento());
    }

    @Test
    @Transactional
    public void deveVerificarBuscarTodosDepoimentos(){
        // CENARIO
        Depoimento depoimento1 = Depoimento.builder()
                .texto("texto depoimento 1")
                .egresso(egressoBase)
                .data(LocalDate.now())
                .build();
        Depoimento depoimento2 = Depoimento.builder()
                .texto("texto depoimento 2")
                .egresso(egressoBase)
                .data(LocalDate.now())
                .build();
        Depoimento depoimento3 = Depoimento.builder()
                .texto("texto depoimento 3")
                .egresso(egressoBase)
                .data(LocalDate.now())
                .build();
        depoimentoJpaRepository.save(depoimento1);
        depoimentoJpaRepository.save(depoimento2);
        depoimentoJpaRepository.save(depoimento3);

        // ACAO
        List<Depoimento> resultado = depoimentoJpaRepository.findAll();
        // VALIDACAO
        assertFalse(resultado.isEmpty());
        assertEquals(3, resultado.size());
    }

    @Test
    @Transactional
    public void deveAtualizarDepoimentoFluxoPadrao(){
        Depoimento depoimentoSalvo = depoimentoJpaRepository.save(Depoimento.builder()
                .texto("texto salvar depoimento teste")
                .data(LocalDate.now())
                .egresso(egressoBase)
                .build());
        Depoimento depoimentoAtualizado = Depoimento.builder()
                .idDepoimento(depoimentoSalvo.getIdDepoimento())
                .texto("texto atualizado")
                .data(LocalDate.now().minusDays(1))
                .egresso(egressoBase)
                .build();

        depoimentoJpaRepository.save(depoimentoAtualizado);

        Optional<Depoimento> resultado = depoimentoJpaRepository.findById(depoimentoAtualizado.getIdDepoimento());

        assertTrue(resultado.isPresent());
        Depoimento depoimentoEncontrado = resultado.get();
        assertEquals(depoimentoAtualizado.getIdDepoimento(), depoimentoEncontrado.getIdDepoimento());
        assertEquals(depoimentoAtualizado.getTexto(), depoimentoEncontrado.getTexto());
        assertEquals(depoimentoAtualizado.getData(), depoimentoEncontrado.getData());
        assertEquals(depoimentoAtualizado.getEgresso().getIdEgresso(), depoimentoEncontrado.getEgresso().getIdEgresso());
    }

    @Test
    @Transactional
    public void deveDeletarDepoimentoPorId(){
        Depoimento depoimentoSalvo = depoimentoJpaRepository.save(Depoimento.builder()
                .texto("texto salvar depoimento teste")
                .data(LocalDate.now())
                .egresso(egressoBase)
                .build());
        depoimentoJpaRepository.deleteById(depoimentoSalvo.getIdDepoimento());

        assertThrows(NoSuchElementException.class, () -> depoimentoJpaRepository.findById(depoimentoSalvo.getIdDepoimento()).get());
    }

    @Test
    @Transactional
    public void deveTestarEgressoPoderTerMaisDeUmDepoimento(){
        Depoimento depoimentoSalvo1 = depoimentoJpaRepository.save(Depoimento.builder().texto("texto depoimento 1").egresso(egressoBase).data(LocalDate.now()).build()();
        Depoimento depoimentoSalvo2 = depoimentoJpaRepository.save(Depoimento.builder().texto("texto depoimento 2").egresso(egressoBase).data(LocalDate.now()).build());

        Set<Depoimento> depoimentos = egressoJpaRepository.findById(egressoBase.getIdEgresso()).get().getDepoimentos();

        assertFalse(depoimentos.isEmpty());
        assertEquals(2, depoimentos.size());
        assertTrue(depoimentos.contains(depoimentoSalvo1));
        assertTrue(depoimentos.contains(depoimentoSalvo2));
    }
}
